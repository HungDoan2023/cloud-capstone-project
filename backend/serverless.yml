app: the-serverless-product-app
service: the-serverless-product-app

plugins:
- serverless-webpack
- serverless-iam-roles-per-function
- serverless-plugin-tracing
- serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: '20201221'
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    PRODUCTS_TABLE: Products-${self:provider.stage}
    PRODUCTS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: 'serverless-products-s3-${self:provider.stage}'
    SIGNED_URL_EXPIRATION: 300

  logs:
    restApi: true

  iam:
    role:
      statements:
      - Effect: Allow
        Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
        Resource:
        - '*'
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Product API
        description: serverless product api
    models:
    - name: CreateProductRequest
      contentType: application/json
      schema: ${file(models/create-product-model.json)}
    - name: UpdateProductRequest
      contentType: application/json
      schema: ${file(models/update-product-model.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetProducts:
    handler: src/lambda/http/getProducts.handler
    events:
    - http:
        method: get
        path: products
        cors: true
        authorizer: Auth
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Query
      - "xray:PutTraceSegments"
      - "xray:PutTelemetryRecords"
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
    - Effect: Allow
      Action:
      - dynamodb:Query
      - "xray:PutTraceSegments"
      - "xray:PutTelemetryRecords"
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}/index/${self:provider.environment.PRODUCTS_CREATED_AT_INDEX}
    - Effect: Allow
      Action:
      - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
    - Effect: Allow
      Action:
      - xray:PutTraceSegments
      - xray:PutTelemetryRecords
      Resource:
      - '*'

  CreateProduct:
    handler: src/lambda/http/createProduct.handler
    events:
    - http:
        method: post
        path: products
        cors: true
        authorizer: Auth
        request:
          schemas:
            application/json: ${file(models/create-product-model.json)}
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
    - Effect: Allow
      Action:
      - "xray:PutTraceSegments"
      - "xray:PutTelemetryRecords"
      Resource:
      - '*'

  UpdateProduct:
    handler: src/lambda/http/updateProduct.handler
    events:
    - http:
        method: patch
        path: products/{productId}
        cors: true
        authorizer: Auth
        request:
          schemas:
            application/json: ${file(models/update-product-model.json)}
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:GetItem
      - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
    - Effect: Allow
      Action:
      - xray:PutTraceSegments
      - xray:PutTelemetryRecords
      Resource:
      - '*'

  DeleteProduct:
    handler: src/lambda/http/deleteProduct.handler
    events:
    - http:
        method: delete
        path: products/{productId}
        cors: true
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:GetItem
      - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
    - Effect: Allow
      Action:
      - xray:PutTraceSegments
      - xray:PutTelemetryRecords
      Resource:
      - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
    - http:
        method: post
        path: products/{productId}/attachment
        cors: true
        authorizer: Auth
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:UpdateItem
      - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
    - Effect: Allow
      Action:
      - s3:PutObject
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
    - Effect: Allow
      Action:
      - xray:PutTraceSegments
      - xray:PutTelemetryRecords
      Resource:
      - '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: 'DEFAULT_4XX'
        StatusCode: '400'
        RestApiId: !Ref ApiGatewayRestApi

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: productId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: productId
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
        - IndexName: ${self:provider.environment.PRODUCTS_CREATED_AT_INDEX}
          KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:provider.environment.ATTACHMENT_S3_BUCKET}'
        OwnershipControls:
          Rules:
          - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
          - AllowedOrigins:
            - '*'
            AllowedHeaders:
            - '*'
            AllowedMethods:
            - GET
            - PUT
            - POST
            - DELETE
            - HEAD
            MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: serverlessBucketPolicy
          Version: '2012-10-17'
          Statement:
          - Principal: '*'
            Effect: Allow
            Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:DeleteObject'
            Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
